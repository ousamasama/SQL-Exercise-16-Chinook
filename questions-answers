1. non_usa_customers.sql: Provide a query showing Customers (just their full names, customer ID and country) who are not in the US.

SELECT FirstName, LastName, CustomerId, Country FROM Customer 
WHERE Country != "USA"

2. brazil_customers.sql: Provide a query only showing the Customers from Brazil.

SELECT FirstName, LastName, CustomerId, Country FROM Customer 
WHERE Country = "Brazil"

3. brazil_customers_invoices.sql: Provide a query showing the Invoices of customers who are from Brazil. The resultant table should show the customer's full name, Invoice ID, Date of the invoice and billing country.

SELECT FirstName, LastName, Invoice.InvoiceDate, Invoice.InvoiceId, Invoice.BillingCountry FROM Customer
JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId
WHERE Customer.Country = "Brazil"

4. sales_agents.sql: Provide a query showing only the Employees who are Sales Agents.

SELECT * FROM employee WHERE title = "Sales Support Agent"

5. unique_invoice_countries.sql: Provide a query showing a unique/distinct list of billing countries from the Invoice table.

SELECT DISTINCT BillingCountry FROM invoice

6. sales_agent_invoices.sql: Provide a query that shows the invoices associated with each sales agent. The resultant table should include the Sales Agent's full name.

SELECT Employee.FirstName, Employee.LastName, InvoiceId FROM Invoice
JOIN Customer ON Customer.CustomerId = Invoice.CustomerId
JOIN Employee ON Customer.SupportRepId = Employee.EmployeeId

7. invoice_totals.sql: Provide a query that shows the Invoice Total, Customer name, Country and Sale Agent name for all invoices and customers.

SELECT Total, BillingCountry, Customer.FirstName as "Cust. First Name", Customer.LastName as "Cust. Last Name", Employee.FirstName as "Emp. First Name", Employee.LastName as "Emp. Last Name" FROM Invoice
JOIN Customer ON Customer.CustomerId = Invoice.CustomerId
JOIN Employee ON Customer.SupportRepId = Employee.EmployeeId

8. total_invoices_{year}.sql: How many Invoices were there in 2009 and 2011?

SELECT Count(InvoiceId) FROM Invoice WHERE InvoiceDate LIKE "%2009%" OR InvoiceDate LIKE "%2011%"

9. total_sales_{year}.sql: What are the respective total sales for each of those years?

SELECT SUM(Total) FROM Invoice WHERE InvoiceDate LIKE "%2009%" ;
SELECT SUM(Total) FROM Invoice WHERE InvoiceDate LIKE "%2011%" ;

10. invoice_37_line_item_count.sql: Looking at the InvoiceLine table, provide a query that COUNTs the number of line items for Invoice ID 37.

SELECT COUNT(*) FROM InvoiceLine WHERE InvoiceLineId = 37

11. line_items_per_invoice.sql: Looking at the InvoiceLine table, provide a query that COUNTs the number of line items for each Invoice. HINT: GROUP BY

SELECT COUNT(*) FROM InvoiceLine GROUP BY InvoiceId

12. line_item_track.sql: Provide a query that includes the purchased track name with each invoice line item.

SELECT InvoiceId, Track.Name FROM InvoiceLine
JOIN Track ON Track.TrackId = InvoiceLine.TrackId

13. line_item_track_artist.sql: Provide a query that includes the purchased track name AND artist name with each invoice line item.

SELECT InvoiceId, Track.Name, Artist.Name FROM InvoiceLine
JOIN Track ON Track.TrackId = InvoiceLine.TrackId
JOIN Album ON Album.AlbumId = Track.AlbumId
JOIN Artist ON Album.ArtistId = Artist.ArtistId

14. country_invoices.sql: Provide a query that shows the # of invoices per country. HINT: GROUP BY

SELECT BillingCountry, COUNT(*) FROM Invoice GROUP BY BillingCountry

15. playlists_track_count.sql: Provide a query that shows the total number of tracks in each playlist. The Playlist name should be include on the resulant table.

SELECT Playlist.Name, COUNT(*) FROM PlaylistTrack
JOIN Playlist ON Playlist.PlaylistId = PlaylistTrack.PlaylistId
GROUP BY Playlist.Name

16. tracks_no_id.sql: Provide a query that shows all the Tracks, but displays no IDs. The result should include the Album name, Media type and Genre.

SELECT Track.Name as "Track Name" , Album.Title as "Album Title", Genre.Name as "Genre", MediaType.Name as "Media Type" FROM Track
JOIN Genre ON Track.GenreId = Genre.GenreId
JOIN Album ON Track.AlbumId = Album.AlbumId
JOIN MediaType ON MediaType.MediaTypeId = Track.MediaTypeId

17. invoices_line_item_count.sql: Provide a query that shows all Invoices but includes the # of invoice line items.

SELECT Invoice.InvoiceId, COUNT(*) FROM InvoiceLine
JOIN Invoice ON Invoice.InvoiceId = InvoiceLine.InvoiceId
GROUP BY Invoice.InvoiceId

18. sales_agent_total_sales.sql: Provide a query that shows total sales made by each sales agent.

SELECT Employee.FirstName, Employee.LastName, SUM(Total) FROM Invoice
JOIN Customer ON Invoice.CustomerId = Customer.CustomerId
JOIN Employee ON Customer.SupportRepId = Employee.EmployeeId
GROUP BY Employee.EmployeeId

19. top_2009_agent.sql: Which sales agent made the most in sales in 2009?

Hint: Use the MAX function on a subquery.

SELECT "First Name", "Last Name", MAX("Total") FROM (
SELECT Employee.FirstName as "First Name", Employee.LastName as "Last Name", SUM(Total) as "Total" FROM Invoice
JOIN Customer ON Invoice.CustomerId = Customer.CustomerId
JOIN Employee ON Customer.SupportRepId = Employee.EmployeeId
WHERE Invoice.InvoiceDate BETWEEN "2009-01-01 00:00:00" AND "2009-12-26 00:00:00"
GROUP BY Employee.EmployeeId );

20. top_agent.sql: Which sales agent made the most in sales over all?

SELECT "First Name", "Last Name", MAX("Total") FROM (
SELECT Employee.FirstName as "First Name", Employee.LastName as "Last Name", SUM(Total) as "Total" FROM Invoice
JOIN Customer ON Invoice.CustomerId = Customer.CustomerId
JOIN Employee ON Customer.SupportRepId = Employee.EmployeeId
GROUP BY Employee.EmployeeId );

21. sales_agent_customer_count.sql: Provide a query that shows the count of customers assigned to each sales agent.

SELECT Employee.FirstName, Employee.LastName, COUNT(*) FROM Customer
JOIN Employee ON Customer.SupportRepId = Employee.EmployeeId
GROUP BY Employee.EmployeeId

22. sales_per_country.sql: Provide a query that shows the total sales per country.

SELECT BillingCountry, SUM(Total) FROM Invoice
GROUP BY Invoice.BillingCountry

23. top_country.sql: Which country's customers spent the most?

SELECT "Country", MAX("Total") FROM (
SELECT BillingCountry as "Country", SUM(Total) as "Total" FROM Invoice
GROUP BY Invoice.BillingCountry )

OR

SELECT BillingCountry, SUM(Total) as "Total" FROM Invoice
GROUP BY Invoice.BillingCountry
ORDER BY "Total" DESC

24. top_2013_track.sql: Provide a query that shows the most purchased track of 2013.

SELECT "Track Name", MAX("Total") FROM (
SELECT Track.Name as "Track Name", COUNT(*) as "Total" FROM Invoice
JOIN InvoiceLine ON InvoiceLine.InvoiceId = Invoice.InvoiceId
JOIN Track ON InvoiceLine.TrackId = Track.TrackId
WHERE Invoice.InvoiceDate BETWEEN "2013-01-02 00:00:00" AND "2013-12-22 00:00:00"
GROUP BY Track.Name
)

25. top_5_tracks.sql: Provide a query that shows the top 5 most purchased tracks over all.

SELECT Track.Name, COUNT(*) as "Total" FROM Invoice
JOIN InvoiceLine ON InvoiceLine.InvoiceId = Invoice.InvoiceId
JOIN Track ON InvoiceLine.TrackId = Track.TrackId
GROUP BY Track.Name
ORDER BY "Total" DESC LIMIT 5

26. top_3_artists.sql: Provide a query that shows the top 3 best selling artists.

SELECT Artist.Name, COUNT(*) as "Total" FROM Invoice
JOIN InvoiceLine ON InvoiceLine.InvoiceId = Invoice.InvoiceId
JOIN Track ON InvoiceLine.TrackId = Track.TrackId
JOIN Album ON Track.AlbumId = Album.AlbumId
JOIN Artist ON Album.ArtistId = Artist.ArtistId
GROUP BY Artist.Name
ORDER BY "Total" DESC LIMIT 3

27. top_media_type.sql: Provide a query that shows the most purchased Media Type.

SELECT MediaType.Name, COUNT(*) as "Total" FROM Invoice
JOIN InvoiceLine ON InvoiceLine.InvoiceId = Invoice.InvoiceId
JOIN Track ON InvoiceLine.TrackId = Track.TrackId
JOIN Album ON Track.AlbumId = Album.AlbumId
JOIN Artist ON Album.ArtistId = Artist.ArtistId
JOIN MediaType ON Track.MediaTypeId = MediaType.MediaTypeId
GROUP BY Track.MediaTypeId